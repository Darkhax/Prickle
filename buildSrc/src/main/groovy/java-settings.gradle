plugins {
    id 'java'
    id 'maven-publish'
}

println("Building with ${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})")
java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = java_version.toInteger()
}

repositories {
    mavenCentral()
}

jar {
    from(rootProject.file("LICENSE"))

    manifest {
        attributes([
                'Specification-Title'     : rootProject.name,
                'Specification-Vendor'    : 'Darkhax',
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : rootProject.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : 'Darkhax',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})"
        ])
    }
}

dependencies {
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9'
    implementation group: 'org.jetbrains', name: 'annotations', version: '24.1.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:prickle:$version")
    }
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

// Sets up publishing for a remote maven.
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            if (rootProject.hasProperty('mavenUsername') && rootProject.hasProperty('mavenPassword')) {
                credentials {
                    username rootProject.findProperty('mavenUsername')
                    password rootProject.findProperty('mavenPassword')
                }
            }
            url rootProject.findProperty('mavenUrl')
        }
    }
}